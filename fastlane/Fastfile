default_platform(:ios)

XC_PROJECT = File.absolute_path('../ios/tv-maniac.xcodeproj')
TEST_DEVICE = "iPhone 15 Pro (17.5)"

platform :ios do
  before_all do
    if is_ci
      setup_ci
      # set Fastlane's xcodebuild -showBuildSettings timeout to a more reasonable value.
      ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    end
  end

  desc "Build iOS App"
  lane :build_tvmaniac do
    # Set a longer timeout for package resolution
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '300'
    
    gradle(
      task: ":shared:copyXCFramework",
      project_dir: File.expand_path('../')
    )

    # First resolve SPM dependencies separately
    sh("cd ../ios && xcodebuild -resolvePackageDependencies -scheme tv-maniac -project tv-maniac.xcodeproj")

    build_app(
      scheme: "tv-maniac",
      project: XC_PROJECT,
      skip_archive: true,
      skip_codesigning: true,
      suppress_xcode_output: false,
      clean: true,
      disable_package_automatic_updates: true,
      derived_data_path: "derived_data",
      xcargs: "-skipPackagePluginValidation",
      buildlog_path: "fastlane/logs"
    )
  end

  desc "Run All UI Tests"
  lane :ui_tests do
    swift_ui_components_tests()
    tvmaniac_ui_components_tests()
  end

  desc "Run SwiftUIComponents Tests"
  lane :swift_ui_components_tests do
      run_tests(
        project: XC_PROJECT,
        scheme: "SwiftUIComponents",
        device: TEST_DEVICE,
        derived_data_path: "derived_data",
        result_bundle: true,
        output_directory: "fastlane/test_output/SwiftUIComponents",
        output_types: "html,junit",
        clean: true
      )
  end

  desc "Run TvManiacUITests Tests"
  lane :tvmaniac_ui_components_tests do
      run_tests(
        project: XC_PROJECT,
        scheme: "TvManiacUITests",
        device: TEST_DEVICE,
        derived_data_path: "derived_data",
        result_bundle: true,
        output_directory: "fastlane/test_output/TvManiacUITests",
        output_types: "html,junit",
        clean: true
      )
  end

  desc "Clear derived data"
  lane :clear_derived_data_lane do
    UI.message("Clearing derived data...")
    clear_derived_data
  end

end
