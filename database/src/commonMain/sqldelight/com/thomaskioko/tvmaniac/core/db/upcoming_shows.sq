import com.thomaskioko.tvmaniac.db.Id;
import com.thomaskioko.tvmaniac.db.PageId;
import com.thomaskioko.tvmaniac.db.TmdbId;

CREATE TABLE IF NOT EXISTS upcoming_shows(
    `id` INTEGER AS Id<TmdbId> PRIMARY KEY NOT NULL,
    `page` INTEGER AS Id<PageId> NOT NULL,
     FOREIGN KEY(`id`) REFERENCES tvshows(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- indices

CREATE UNIQUE INDEX IF NOT EXISTS `index_upcoming_shows_show_id` ON `upcoming_shows` (`id`);

-- queries

insert:
INSERT OR REPLACE INTO upcoming_shows(
    `id`,
    `page`
) VALUES (
    :id,
    :page
);

upcomingShows:
SELECT
    upcoming_shows.id,
    upcoming_shows.page,
    tvshows.name,
    tvshows.poster_path,
    CASE WHEN library.id IS NOT NULL THEN 1 ELSE 0 END AS in_library
FROM
    upcoming_shows
INNER JOIN
    tvshows ON tvshows.id = upcoming_shows.id
LEFT OUTER JOIN
    library ON tvshows.id = library.id;

pagedUpcomingShows:
SELECT
    upcoming_shows.id,
    upcoming_shows.page,
    tvshows.name,
    tvshows.poster_path,
    CASE WHEN library.id IS NOT NULL THEN 1 ELSE 0 END AS in_library
FROM
    upcoming_shows
INNER JOIN
    tvshows ON tvshows.id = upcoming_shows.id
LEFT OUTER JOIN
    library ON tvshows.id = library.id
ORDER BY
    upcoming_shows.page ASC
LIMIT
    :limit OFFSET :offset;

pageExists:
SELECT EXISTS(SELECT 1 FROM upcoming_shows WHERE page = :page LIMIT 1);

count:
SELECT count(*) FROM upcoming_shows;

delete:
DELETE FROM upcoming_shows
WHERE id = :id;

deleteAll:
DELETE FROM upcoming_shows;
