import com.thomaskioko.tvmaniac.db.CastId;
import com.thomaskioko.tvmaniac.db.Id;
import com.thomaskioko.tvmaniac.db.TmdbId;
import com.thomaskioko.tvmaniac.db.SeasonId;

CREATE TABLE IF NOT EXISTS cast_appearance (
    cast_id INTEGER AS Id<CastId> NOT NULL,
    show_id INTEGER AS Id<TmdbId> NOT NULL,
    season_id INTEGER AS Id<SeasonId>,
    PRIMARY KEY (cast_id, show_id, season_id),
    FOREIGN KEY(cast_id) REFERENCES casts(id) ON DELETE CASCADE,
    FOREIGN KEY(show_id) REFERENCES tvshow(id) ON DELETE CASCADE,
    FOREIGN KEY(season_id) REFERENCES season(id) ON DELETE CASCADE
);

-- indices
CREATE UNIQUE INDEX IF NOT EXISTS `index_cast_appearance_unique` ON `cast_appearance` (`cast_id`, `show_id`, `season_id`);
CREATE UNIQUE INDEX IF NOT EXISTS `index_cast_appearance_id` ON `cast_appearance` (`cast_id`);

-- queries
upsert:
INSERT OR REPLACE INTO cast_appearance(
    cast_id,
    show_id,
    season_id
)
VALUES( ?, ?, ?);

showCast:
SELECT
    cm.id,
    cm.name,
    cm.profile_path,
    cm.character_name,
    ca.season_id
FROM casts cm
JOIN cast_appearance ca ON cm.id = ca.cast_id
WHERE ca.show_id = ?
ORDER BY cm.name;

seasonCast:
SELECT
    cm.id,
    cm.name,
    cm.profile_path,
    cm.character_name
FROM casts cm
JOIN cast_appearance ca ON cm.id = ca.cast_id
WHERE ca.season_id = ?
ORDER BY cm.popularity;

