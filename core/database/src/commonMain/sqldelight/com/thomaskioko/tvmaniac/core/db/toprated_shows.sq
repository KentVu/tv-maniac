import com.thomaskioko.tvmaniac.db.Id;
import com.thomaskioko.tvmaniac.db.PageId;
import com.thomaskioko.tvmaniac.db.TmdbId;

CREATE TABLE IF NOT EXISTS toprated_shows(
    `id` INTEGER AS Id<TmdbId> PRIMARY KEY NOT NULL,
    `page` INTEGER AS Id<PageId> NOT NULL,
     FOREIGN KEY(`id`) REFERENCES tvshows(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- indices

CREATE UNIQUE INDEX IF NOT EXISTS `index_toprated_shows_show_id` ON `toprated_shows` (`id`);

-- queries

insert:
INSERT OR REPLACE INTO toprated_shows(
    `id`,
    `page`
) VALUES (
    :id,
    :page
);

topRatedShows:
SELECT
    toprated_shows.id,
    toprated_shows.page,
    tvshows.name,
    tvshows.poster_path,
    CASE WHEN library.id IS NOT NULL THEN 1 ELSE 0 END AS in_library
FROM
    toprated_shows
INNER JOIN
    tvshows ON tvshows.id = toprated_shows.id
LEFT OUTER JOIN
    library ON tvshows.id = library.id
ORDER BY
    tvshows.popularity DESC;

pagedTopRatedShows:
SELECT
    toprated_shows.id,
    toprated_shows.page,
    tvshows.name,
    tvshows.poster_path,
    CASE WHEN library.id IS NOT NULL THEN 1 ELSE 0 END AS in_library
FROM
    toprated_shows
INNER JOIN
    tvshows ON tvshows.id = toprated_shows.id
LEFT OUTER JOIN
    library ON tvshows.id = library.id
WHERE
    toprated_shows.page = :page;

delete:
DELETE FROM toprated_shows
WHERE id = :id;

deleteAll:
DELETE FROM toprated_shows;
